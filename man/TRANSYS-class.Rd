% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transys.R
\docType{class}
\name{TRANSYS-class}
\alias{TRANSYS-class}
\alias{TRANSYS}
\title{TRANSYS: A reference class for modelling Transition Systems}
\description{
Reference class containing some properties and methods required for analysing, modelling, simulating and visualising a Transition Sytem.
A Transistopn System is the more general case of a Markov Chain model descibing a system which can change status over time.
}
\section{Fields}{

\describe{
\item{\code{history}}{\code{data.frame} holding history data of status transitions}

\item{\code{report}}{\code{list} list of data.frames containing outputs of various query reports. These tables could be:

\code{nodes}: \code{data.frame} holding nodes of a transition system network. Nodes are equivalent to statuses.
\code{links}: \code{data.frame} holding links of a transition system network. Links(edges) are equivalent to transitions.}
}}

\section{Methods}{

\describe{
\item{\code{feed.eventlog(dataset, caseID_col = "caseID", status_col = "status",
  startTime_col = "startTime", caseStartFlag_col = NULL,
  caseEndFlag_col = NULL, caseStartTags = NULL, caseEndTags = NULL,
  sort_startTime = T, add_start = T, remove_sst = F, extra_col = NULL)}}{Feeds an eventlog as a data.frame or tibble to train the transition system model.}

\item{\code{get.case.path()}}{Returns trace, path, DNA or status sequence of each case}

\item{\code{get.case.status.duration()}}{Returns a table containing duration of each case on each status}

\item{\code{get.case.status.time()}}{Returns entry time of each case to each status in a matrix}

\item{\code{get.longest_path()}}{Returns the longest sequence observed}

\item{\code{get.nodes(full = F)}}{Returns the status profile which is a data.frame containing features associated with the statuses of the transition system.
\cr 
Each status stablish a node in the process map graph from which you can build a Markov-Chain (MC) 
model and use it to determine the steady state probabilities or run a memory-less process simulation.
\cr 
If you run this method once, the output table will be accessible via reports$nodes.
If the function is called for the second time, it returns the same table as before if you do not reset the object.
\cr 
\emph{Arguments:} 
\cr 
* \code{full (logical)}: If set to true, case filtering is ignored.
\cr 
\emph{Output:} 
\cr 
\code{(data.frame)}: Includes the following columns 
(columns with keyword 'case' are generated only if settings$include_case_measures is TRUE):
\cr 
* \code{totExitFreq}: Over all cases, total count of transitions from the status to other statuses.
\cr 
* \code{totEntryFreq}: Over all cases, total count of transitions into the status from other statuses .
\cr 
\code{totalDuration}: Sum of duration(time) cases were in the status.
\cr 
\code{meanDuration}: Average duration(time) each case were in the status.
\cr 
\code{medDuration}: Median of duration(time) cases were in the status.
\cr 
\code{sdDuration}: Standard deviation of duration(time) cases were in the status.
\cr 
\code{nCaseEntry}: How many cases have at least once entered into the status.
\cr 
\code{nCaseExit}: How many cases have at least once exited from the status.
\cr 
\code{meanExitCaseFrequency}: indicates how many times in average, each case has exited from the status}

\item{\code{get.status.case.time()}}{Returns entry time to each status for each case in a matrix (transpose of 'case.status.time')}
}}

